{"ast":null,"code":"import { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\nimport { request } from \"../utility/utility\";\nimport { TOKEN, ISPENDING } from \"../utility/constants\";\nconst initialState = {\n  orderNumber: 0,\n  cart: {\n    bun: [],\n    main: []\n  },\n  error: ''\n};\nexport const submitOrder = createAsyncThunk(\"cart/submitOrder\", async (_, _ref) => {\n  let {\n    getState,\n    rejectWithValue\n  } = _ref;\n  try {\n    const {\n      bun,\n      main\n    } = getState().cart.cart;\n    const ingredientsIds = [...bun, ...bun, ...main].map(item => item._id);\n    const token = localStorage.getItem(TOKEN) || '';\n    return await request('/orders', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        \"Authorization\": token\n      },\n      body: JSON.stringify({\n        ingredients: ingredientsIds\n      })\n    });\n  } catch (err) {\n    return rejectWithValue(err);\n  }\n});\nconst buregerCart = createSlice({\n  name: 'cart',\n  initialState,\n  reducers: {\n    addItem: (state, action) => {\n      const newItem = {\n        ...action.payload,\n        newId: `${action.payload._id}-${Date.now()}`\n      };\n      if (newItem.type === 'bun') {\n        state.cart.bun = [newItem];\n      } else {\n        state.cart.main = [...state.cart.main, newItem];\n      }\n    },\n    removeItem: (state, action) => {\n      state.cart.main = state.cart.main.filter(item => item.newId !== action.payload);\n    },\n    moveItem: (state, action) => {\n      state.cart.main = action.payload;\n    },\n    emptyCart: state => {\n      state.cart.bun = [];\n      state.cart.main = [];\n    }\n  },\n  extraReducers: builder => {\n    builder.addCase(submitOrder.fulfilled, (state, action) => {\n      const data = action.payload;\n      console.log(data);\n      state.orderNumber = data.order.number;\n      state.cart.bun = [];\n      state.cart.main = [];\n    }).addCase(submitOrder.rejected, (state, action) => {\n      state.error = action.error.message;\n      console.log('aaa');\n    }).addCase(submitOrder.pending, (state, action) => {\n      state.orderNumber = ISPENDING;\n    });\n  }\n});\nexport const {\n  addItem,\n  removeItem,\n  moveItem,\n  emptyCart\n} = buregerCart.actions;\nexport default buregerCart;","map":{"version":3,"names":["createSlice","createAsyncThunk","request","TOKEN","ISPENDING","initialState","orderNumber","cart","bun","main","error","submitOrder","_","_ref","getState","rejectWithValue","ingredientsIds","map","item","_id","token","localStorage","getItem","method","headers","body","JSON","stringify","ingredients","err","buregerCart","name","reducers","addItem","state","action","newItem","payload","newId","Date","now","type","removeItem","filter","moveItem","emptyCart","extraReducers","builder","addCase","fulfilled","data","console","log","order","number","rejected","message","pending","actions"],"sources":["/Users/ois/Documents/oisCoder/ReactBurgerTs/src/services/burgerCart-slice.ts"],"sourcesContent":["import { createSlice, createAsyncThunk, PayloadAction} from \"@reduxjs/toolkit\";\nimport { request } from \"../utility/utility\";\nimport { IngredientGlobalType } from \"../utility/types\";\nimport { TOKEN, ISPENDING } from \"../utility/constants\";\n\ntype Cart = {\n    orderNumber: number | string;\n    cart: {\n        bun: IngredientGlobalType[];\n        main: IngredientGlobalType[];\n    };\n    error: any;\n}\n\ntype Owner = {\n    name: string;\n    email: string;\n    createdAt: string;\n    updatedAt: string;\n  };\n\ntype Order = {\n    createdAt: string;\n    ingredients: IngredientGlobalType[];\n    name: string;\n    number: number;\n    owner: Owner;\n    price: number;\n    status: string;\n    updatedAt: string;\n    _id: string;\n  };\n\ntype OrederResponse = { \n    name: string;\n    order: Order;\n    succses: boolean;\n}  \n\n\nconst initialState: Cart = {\n    orderNumber: 0,\n    cart: {\n        bun: [],\n        main: [],\n    },\n    error: ''\n};\n\nexport const submitOrder = createAsyncThunk<OrederResponse, void, { state: { cart: Cart }, rejectValue: any }>(\n    \"cart/submitOrder\", \n    async(_, {getState, rejectWithValue}) => {\n        try {\n            const {bun, main} = getState().cart.cart\n            const ingredientsIds = [...bun, ...bun,  ...main].map((item) => item._id)\n            const token = localStorage.getItem(TOKEN) || ''\n            return await request('/orders', {\n                method: 'POST', \n                headers: {\n                    'Content-Type': 'application/json',\n                    \"Authorization\": token\n                },\n                body: JSON.stringify({ ingredients: ingredientsIds }),\n            });\n        } catch (err) {\n            return rejectWithValue(err);\n        }\n    }\n);\n\nconst buregerCart = createSlice({\n    name: 'cart',\n    initialState, \n    reducers: {\n        addItem: (state, action) => { \n            const newItem = {\n                ...action.payload,\n                newId: `${action.payload._id}-${Date.now()}`\n            }\n            if (newItem.type === 'bun'){\n            state.cart.bun = [newItem]\n            }\n            else {\n                state.cart.main = [...state.cart.main, newItem]\n            }\n\n        },\n\n        removeItem: (state, action) => {\n            state.cart.main = state.cart.main.filter((item) =>item.newId !== action.payload)\n        }, \n        moveItem: (state, action) => {\n            state.cart.main = action.payload\n        },\n        emptyCart: (state) => {\n            state.cart.bun = [];\n            state.cart.main = []\n        }\n    },\n    extraReducers: (builder) => {\n        builder\n            .addCase(submitOrder.fulfilled, (state, action) => {\n                const data = action.payload;\n                console.log(data)\n\n                state.orderNumber = data.order.number;\n                state.cart.bun = [];\n                state.cart.main = [];\n            })\n            .addCase(submitOrder.rejected, (state, action) => {\n                state.error = action.error.message\n                console.log('aaa')\n            })\n            .addCase(submitOrder.pending, (state, action) => {\n                state.orderNumber = ISPENDING\n            })\n    }    \n})\n\n\nexport const {addItem, removeItem, moveItem, emptyCart} = buregerCart.actions\nexport default buregerCart"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}