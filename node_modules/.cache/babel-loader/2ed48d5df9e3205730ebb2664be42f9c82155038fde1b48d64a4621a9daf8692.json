{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\nconst initialState = {\n  orders: {\n    success: false,\n    orders: [],\n    total: 0,\n    totalToday: 0\n  },\n  connected: false\n};\nconst middlewareReducer = createSlice({\n  name: 'webSocket',\n  initialState: initialState,\n  reducers: {\n    wsConnecting: (state, action) => {\n      state.connected = false;\n    },\n    wsConnected: (state, action) => {\n      state.connected = true;\n    },\n    wsDisconnected: (state, action) => {\n      state.connected = false;\n      //state.orders = []\n    },\n\n    wsOnMessage: (state, action) => {\n      state.orders = action.payload;\n    }\n  }\n});\nexport const {\n  wsConnecting,\n  wsConnected,\n  wsDisconnected,\n  wsOnMessage\n} = middlewareReducer.actions;\nexport default middlewareReducer;","map":{"version":3,"names":["createSlice","initialState","orders","success","total","totalToday","connected","middlewareReducer","name","reducers","wsConnecting","state","action","wsConnected","wsDisconnected","wsOnMessage","payload","actions"],"sources":["/Users/ois/Documents/oisCoder/ReactBurgerTs/src/services/middlewareReducer.ts"],"sourcesContent":["import { createSlice, PayloadAction, Action } from \"@reduxjs/toolkit\";\nimport { MultipleReceivedOrders} from \"../utility/types\";\n\n\ninterface WebSocketInterface {\n    orders: MultipleReceivedOrders;\n    connected: boolean;\n}\n\nconst initialState: WebSocketInterface = {\n    orders: {\n        success: false,\n        orders: [],\n        total: 0,\n        totalToday: 0,\n    },\n    connected: false,\n};\n\n\n\nconst middlewareReducer = createSlice({\n    name: 'webSocket',\n    initialState: initialState,\n    reducers: {\n    wsConnecting: (state, action: PayloadAction<string>) => {\n        state.connected = false;\n    },\n    wsConnected: (state, action: PayloadAction<any>) => {\n        state.connected = true;\n    },\n    wsDisconnected: (state, action: Action) => {\n        state.connected = false;\n        //state.orders = []\n    },\n    wsOnMessage: (state, action: PayloadAction<MultipleReceivedOrders>) => {\n            state.orders = action.payload;        \n    },\n    },\n});\n\nexport const { wsConnecting, wsConnected, wsDisconnected, wsOnMessage } = middlewareReducer.actions;\n\nexport default middlewareReducer"],"mappings":"AAAA,SAASA,WAAW,QAA+B,kBAAkB;AASrE,MAAMC,YAAgC,GAAG;EACrCC,MAAM,EAAE;IACJC,OAAO,EAAE,KAAK;IACdD,MAAM,EAAE,EAAE;IACVE,KAAK,EAAE,CAAC;IACRC,UAAU,EAAE;EAChB,CAAC;EACDC,SAAS,EAAE;AACf,CAAC;AAID,MAAMC,iBAAiB,GAAGP,WAAW,CAAC;EAClCQ,IAAI,EAAE,WAAW;EACjBP,YAAY,EAAEA,YAAY;EAC1BQ,QAAQ,EAAE;IACVC,YAAY,EAAEA,CAACC,KAAK,EAAEC,MAA6B,KAAK;MACpDD,KAAK,CAACL,SAAS,GAAG,KAAK;IAC3B,CAAC;IACDO,WAAW,EAAEA,CAACF,KAAK,EAAEC,MAA0B,KAAK;MAChDD,KAAK,CAACL,SAAS,GAAG,IAAI;IAC1B,CAAC;IACDQ,cAAc,EAAEA,CAACH,KAAK,EAAEC,MAAc,KAAK;MACvCD,KAAK,CAACL,SAAS,GAAG,KAAK;MACvB;IACJ,CAAC;;IACDS,WAAW,EAAEA,CAACJ,KAAK,EAAEC,MAA6C,KAAK;MAC/DD,KAAK,CAACT,MAAM,GAAGU,MAAM,CAACI,OAAO;IACrC;EACA;AACJ,CAAC,CAAC;AAEF,OAAO,MAAM;EAAEN,YAAY;EAAEG,WAAW;EAAEC,cAAc;EAAEC;AAAY,CAAC,GAAGR,iBAAiB,CAACU,OAAO;AAEnG,eAAeV,iBAAiB"},"metadata":{},"sourceType":"module","externalDependencies":[]}